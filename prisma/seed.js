import { PrismaClient } from "@prisma/client";
import bcrypt from "bcrypt";

const prisma = new PrismaClient();
const SALT_ROUNDS = 10;

async function deleteAllData() {
  console.log("Deleting all seeded data...");
  
  await prisma.variation.deleteMany();
  console.log("Deleted variations");
  
  await prisma.service.deleteMany();
  console.log("Deleted services");
  
  await prisma.serviceType.deleteMany();
  console.log("Deleted service types");
  
  console.log("All seeded data deleted successfully!");
}

async function main() {
  console.log("Starting to seed variations...");

  // Define variations based on your service IDs
  const variationsData = [
    // Service ID 1: Tiáº¿c cÆ°á»›i Ä‘Æ¡n giáº£n
    { variation_name: "Tiá»‡c cÆ°á»›i cÆ¡ báº£n (50-100 khÃ¡ch)", base_price: 15000000, service_id: 1 },
    { variation_name: "Tiá»‡c cÆ°á»›i cao cáº¥p (100-200 khÃ¡ch)", base_price: 25000000, service_id: 1 },
    { variation_name: "Tiá»‡c cÆ°á»›i VIP (200+ khÃ¡ch)", base_price: 40000000, service_id: 1 },

    // Service ID 2: Dá»‹ch vá»¥ MC tiáº¿c cÆ°á»›i
    { variation_name: "MC bÃ¡n chuyÃªn", base_price: 1000000, service_id: 2 },
    { variation_name: "MC chuyÃªn nghiá»‡p", base_price: 2500000, service_id: 2 },
    { variation_name: "MC ná»•i tiáº¿ng", base_price: 5000000, service_id: 2 },

    // Service ID 6: Trang trÃ­ sá»± kiá»‡n
    { variation_name: "Trang trÃ­ cÆ¡ báº£n", base_price: 2000000, service_id: 6 },
    { variation_name: "Trang trÃ­ cao cáº¥p vá»›i backdrop", base_price: 5000000, service_id: 6 },
    { variation_name: "Trang trÃ­ VIP concept Ä‘á»™c Ä‘Ã¡o", base_price: 10000000, service_id: 6 },

    // Service ID 7: Ã‚m thanh Ã¡nh sÃ¡ng
    { variation_name: "Há»‡ thá»‘ng Ã¢m thanh cÆ¡ báº£n", base_price: 1500000, service_id: 7 },
    { variation_name: "Ã‚m thanh chuyÃªn nghiá»‡p", base_price: 3500000, service_id: 7 },
    { variation_name: "Há»‡ thá»‘ng Ã¡nh sÃ¡ng sÃ¢n kháº¥u", base_price: 4000000, service_id: 7 },
    { variation_name: "Combo Ã¢m thanh + Ã¡nh sÃ¡ng LED", base_price: 6000000, service_id: 7 },

    // Service ID 8: Dá»‹ch vá»¥ Äƒn uá»‘ng
    { variation_name: "Buffet cÆ¡ báº£n", base_price: 200000, service_id: 8 },
    { variation_name: "Buffet cao cáº¥p", base_price: 400000, service_id: 8 },
    { variation_name: "Set menu VIP", base_price: 800000, service_id: 8 },
    { variation_name: "Tiá»‡c cocktail", base_price: 300000, service_id: 8 },
  ];

  // Create variations
  let createdCount = 0;
  for (const variationData of variationsData) {
    try {
      // Check if variation already exists to avoid duplicates
      const existingVariation = await prisma.variation.findFirst({
        where: {
          variation_name: variationData.variation_name,
          service_id: variationData.service_id
        }
      });

      if (existingVariation) {
        console.log(`âš  Variation already exists: ${variationData.variation_name}`);
        continue;
      }

      const variation = await prisma.variation.create({
        data: {
          variation_name: variationData.variation_name,
          base_price: variationData.base_price,
          service_id: variationData.service_id
        }
      });
      
      createdCount++;
      console.log(`âœ“ Created variation: ${variation.variation_name} (ID: ${variation.variation_id}) for service_id: ${variationData.service_id}`);
    } catch (error) {
      console.error(`âœ— Failed to create variation: ${variationData.variation_name}`, error.message);
    }
  }

  console.log(`\nðŸŽ‰ Successfully created ${createdCount} variations!`);
}

// Check command line arguments
const args = process.argv.slice(2);
if (args.includes('--delete')) {
  deleteAllData()
    .catch(e => {
      console.error(e);
      process.exit(1);
    })
    .finally(async () => {
      await prisma.$disconnect();
    });
} else {
  main()
    .catch(e => {
      console.error(e);
      process.exit(1);
    })
    .finally(async () => {
      await prisma.$disconnect();
    });
}